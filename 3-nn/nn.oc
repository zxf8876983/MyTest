#include<obliv.oh>
#include"nn.h"
#include<stdio.h>
#include<stdlib.h>


obliv int max(obliv int *array,int n);

 obliv int max(obliv int *array,int n){
  int i;
  obliv int index=0;
  obliv int maxnum=array[0];
  for(i=1;i<n;i++){
    obliv if(maxnum<array[i]){
      maxnum=array[i];
      index=i;
    }
  }
  return(index);
 }

void nn(void* args){
	protocolIO *io=args;
	int i,j,m,n;
	obliv int k;
	obliv int t=1000;
	obliv int b1,b2;
	obliv int zero=0;
	obliv int bc1[fc1_col],bc2[fc2_col];
	obliv int w1[w_len][w_len],w2[w_len][w_len];
	obliv int fc2[fc1_col][fc2_col],face[x_row][x_col];
	obliv int fc1_1[fc1_row][fc1_col/2],fc1_2[fc1_row][fc1_col/2];


	//w1
	for(i=0;i<w_len;i++){
		for(j=0;j<w_len;j++){
			w1[i][j]=feedOblivInt(io->w1[i][j],1);
			//printf("%d\t",w1[i][j]);
		}
		//printf("\n");
	}
	//b1
	b1=feedOblivInt(io->b1,1);



	//w2
	for(i=0;i<w_len;i++){
		for(j=0;j<w_len;j++){
			 w2[i][j]=feedOblivInt(io->w2[i][j],1);
			 //printf("%d\t",w2[i][j]);
		}
		//printf("\n");
	}
	//b2
	b2=feedOblivInt(io->b2,1);
	//fc1
/*
	for(i=0;i<fc1_row;i++){
		for(j=0;j<fc1_col;j++){
			 fc1[i][j]=feedOblivInt(io->fc1[i][j],1);
			 //printf("%d\t",fc1[i][j]);
		}
		//printf("\n");
	}*/

	for(i=0;i<fc1_row;i++){
		for(j=0;j<fc1_col/2;j++){
			 fc1_1[i][j]=feedOblivInt(io->fc1_1[i][j],1);
			 fc1_2[i][j]=feedOblivInt(io->fc1_2[i][j],1);
			 //printf("%d\t",fc1[i][j]);
		}
		//printf("\n");
	}


	//bc1
	for(i=0;i<fc1_col;i++){
		 bc1[i]=feedOblivInt(io->bc1[i],1);
		 //printf("%d\t",bc1[i]);
	}
	//fc2
	for(i=0;i<fc2_row;i++){
		for(j=0;j<fc2_col;j++){
			 fc2[i][j]=feedOblivInt(io->fc2[i][j],1);
			 //printf("%d\t",fc2[i][j]);
		}
	//printf("\n");
	}
	//bc2
	for(i=0;i<fc2_col;i++){
		bc2[i]=feedOblivInt(io->bc2[i],1);
		//printf("%d\t",bc2[i]);
	}

	//face
	for(i=0;i<x_row;i++){
		for(j=0;j<x_col;j++){
			 face[i][j]=feedOblivInt(io->face[i][j],2);
			 //printf("%d\t",face[i][j]);
		}
		//printf("\n");
	}


//-----------------------------------------------------------

	//h_conv1
	obliv int **h_conv1 = malloc(sizeof(obliv int) *x_row);
	for(i=0;i<x_row;i++){
		h_conv1[i]=malloc(sizeof(obliv int) * x_col);	
	}

	//W1
	obliv int **W1 = malloc(sizeof(obliv int) *(x_row+4));
	for(i=0;i<x_row+4;i++){
		W1[i]=malloc(sizeof(obliv int) * (x_col+4));	
	}
	//归0
	for(i=0;i<x_row+4;i++){
		for(j=0;j<x_col+4;j++){
			 W1[i][j]=0;
			 //printf("%d\t",face[i][j]);
		}
		//printf("\n");
	}
	//填充
	for(i=0;i<x_row;i++){
		for(j=0;j<x_col;j++){
			 W1[i+2][j+2]=face[i][j];
			 //printf("%d\t",W1[i+2][j+2]);
		}
		//printf("\n");
	}
	//conv2d_1
	for(i=2;i<x_row+2;i++){
		for(j=2;j<x_col+2;j++){
			k=0;
			for(m=0;m<5;m++){
				for(n=0;n<5;n++){
			 		k+=w1[m][n]*W1[i-2+m][j-2+n]; //x*w
				}
			}
			h_conv1[i-2][j-2]=k/t+b1;                 //x*w+b
			obliv if(h_conv1[i-2][j-2]<0) h_conv1[i-2][j-2]=0;  //relu
			//printf("%d\t",h_conv1[i][j]);
		}
		//printf("\n");
	}
	free(W1);

	//maxpool_1
	// h_pool1
	obliv int **h_pool1 = malloc(sizeof(obliv int) *x_row_pool1);
	for(i=0;i<x_row_pool1;i++){
		h_pool1[i]=malloc(sizeof(obliv int) *x_col_pool1);	
	}

	for(i=0;i<x_row-1;i+=2){
		for(j=0;j<x_col-1;j+=2){
			k=h_conv1[i][j];
			//printf("%d\n",k);
			for(m=0;m<2;m++){
				for(n=0;n<2;n++){
					obliv if(h_conv1[i+m][j+n]>k){
						k=h_conv1[i+m][j+n];}				
				}			
			}
			h_pool1[i/2][j/2]=k;	
			//printf("%d\t",h_pool1[i/2][j/2]);	
		}
		//printf("\n");
	}
	free(h_conv1);
//---------------------------------------------------------------------

	// W2;

	obliv int **W2 = malloc(sizeof(obliv int) *(x_row_pool1+4));
	for(i=0;i<x_row;i++){
		W2[i]=malloc(sizeof(obliv int) *(x_col_pool1+4));	
	}

	//int h_conv2[x_row_pool1][x_col_pool1]={0};
	obliv int **h_conv2 = malloc(sizeof(obliv int) *x_row_pool1);
	for(i=0;i<x_row;i++){
		h_conv2[i]=malloc(sizeof(obliv int) *x_col_pool1);	
	}

	for(i=0;i<x_row_pool1;i++){
		for(j=0;j<x_col_pool1;j++){
			 W2[i+2][j+2]=h_pool1[i][j];
			 //printf("%d\t",W1[i+2][j+2]);
		}
		//printf("\n");
	}
	free(h_pool1);

	//conv2d_2
	for(i=2;i<x_row_pool1+2;i++){
		for(j=2;j<x_col_pool1+2;j++){
			k=0;
			for(m=0;m<5;m++){
				for(n=0;n<5;n++){
			 		k+=w2[m][n]*W2[i-2+m][j-2+n]; //x*w
				}
			}
			h_conv2[i-2][j-2]=k/t+b2;                 //x*w+b
			obliv if(h_conv2[i-2][j-2]<0) h_conv2[i-2][j-2]=0;  //relu
			//printf("%d\t",h_conv2[i-2][j-2]);
		}
		//printf("\n");
	}
	free(W2);

	//maxpool_2
	//h_pool2
	obliv int **h_pool2 = malloc(sizeof(obliv int) *x_row_pool2);
	for(i=0;i<x_row;i++){
		h_pool2[i]=malloc(sizeof(obliv int) *x_col_pool2);	
	}

	for(i=0;i<x_row_pool1-1;i+=2){
		for(j=0;j<x_col_pool1-1;j+=2){
			k=h_conv2[i][j];
			//printf("%d\n",k);
			for(m=0;m<2;m++){
				for(n=0;n<2;n++){
					obliv if(h_conv2[i+m][j+n]>k){
						k=h_conv2[i+m][j+n];}				
				}			
			}
			h_pool2[i/2][j/2]=k;	
			//printf("%d\t",h_pool2[i/2][j/2]);	
		}
		//printf("\n");
	}
	free(h_conv2);
//**********************************************************************

	//int h_pool2_flat[fc1_row];
	obliv int *h_pool2_flat = malloc(sizeof(obliv int) *fc1_row);

	for(i=0;i<x_row_pool2;i++){
		for(j=0;j<x_col_pool2;j++){
			h_pool2_flat[i*x_col_pool2+j]=h_pool2[i][j];
			//printf("%d\t",h_pool2_flat[i*x_row_pool2+j]);
		}
		//printf("\n");
	}
	free(h_pool2);
	//int h_fc1[fc1_col];
	obliv int *h_fc1 = malloc(sizeof(obliv int) *fc1_col);

	for(i=0;i<fc1_col/2;i++){
		for(j=0;j<fc1_row;j++){
			h_fc1[i]+=h_pool2_flat[j]*fc1_1[j][i];
			h_fc1[i+fc1_col/2]+=h_pool2_flat[j]*fc1_2[j][i];
		}
		h_fc1[i]=h_fc1[i]/t+bc1[i];
		h_fc1[i+fc1_col/2]=h_fc1[i+fc1_col/2]/t+bc1[i+fc1_col/2];
		//obliv if(h_fc1[i]<0) h_fc1[i]=0;

		//ovliv if(h_fc1[i+fc1_col/2]<0) //h_fc1[i+fc1_col/2]=0;              
		//printf("%d\t",h_fc1[i]);
	}
	free(h_pool2_flat);

	//relu
	for(i=0;i<fc1_col;i++){ 
		obliv if(h_fc1[i]<0) h_fc1[i]=0;
	}


	obliv int y_conv[fc2_col];
	for(i=0;i<fc2_col;i++){
		for(j=0;j<fc2_row;j++){
			y_conv[i]+=h_fc1[j]*fc2[j][i];
		}
		y_conv[i]=y_conv[i]/t+bc2[i];
		//revealOblivInt(&io->res[i],y_conv[i],0);
		//printf("%d\t",y_conv[i]);
	}
	//printf("\n");
	free(h_fc1);

	obliv int index=zero;
	obliv int maxnum=y_conv[0];
	for(i=0;i<y_col;i++){
		obliv if(maxnum<y_conv[i]){
			maxnum=y_conv[i];
			index=i;
		}
	}

	for(i=0;i<y_col;i++){
		revealOblivInt(&io->y_conv[i],y_conv[i],2);
	}
	//revealOblivInt(&io->y_conv,y_conv,0);
	revealOblivInt(&io->res,index,2);

	//free(W1);
	//free(h_conv1);
	//free(h_pool1);
	//free(W2);
	//free(h_conv2);
	//free(h_pool2);
	//free(h_pool2_flat);
	//free(h_fc1);
}
