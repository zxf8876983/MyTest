#include<obliv.oh>
#include"nn.h"
#include<stdio.h>
#include<stdlib.h>


obliv int max(obliv int *array,int n);

 obliv int max(obliv int *array,int n){
  int i;
  obliv int index=0;
  obliv int maxnum=array[0];
  for(i=1;i<n;i++){
    obliv if(maxnum<array[i]){
      maxnum=array[i];
      index=i;
    }
  }
  return(index);
 }

void nn(void* args){
	protocolIO *io=args;
	int i,j,m,n;
	obliv int k;
	obliv int t=1000;
	obliv int b1,b2;
	obliv int zero=0;
	obliv int bc1[fc1_col],bc2[fc2_col];
	obliv int w1[w_len][w_len],w2[w_len][w_len];
	obliv int face[168][30];

/*
	//obliv int fc1[fc1_row][fc1_col],fc2[fc1_col][fc2_col];
	obliv int **fc1 = malloc(sizeof(obliv int) * fc1_row);
	for(i=0;i<fc1_row;i++){
		fc1[i]=malloc(sizeof(obliv int) * fc1_col);	
	}

	obliv int **fc2 = malloc(sizeof(obliv int) * fc1_col);
	for(i=0;i<fc1_col;i++){
		fc2[i]=malloc(sizeof(obliv int) * fc2_col);	
	}
	//obliv int face[x_row][x_col];
	obliv int **face = malloc(sizeof(obliv int) * x_row);
	for(i=0;i<x_row;i++){
		face[i]=malloc(sizeof(obliv int) * x_col);	
	}




	//w1
	for(i=0;i<w_len;i++){
		for(j=0;j<w_len;j++){
			w1[i][j]=feedOblivInt(io->w1[i][j],1);
			//printf("%d\t",w1[i][j]);
		}
		//printf("\n");
	}
	//b1
	b1=feedOblivInt(io->b1,1);



	//w2
	for(i=0;i<w_len;i++){
		for(j=0;j<w_len;j++){
			 w2[i][j]=feedOblivInt(io->w2[i][j],1);
			 //printf("%d\t",w2[i][j]);
		}
		//printf("\n");
	}
	//b2
	b2=feedOblivInt(io->b2,1);
	//fc1
	for(i=0;i<fc1_row;i++){
		for(j=0;j<fc1_col;j++){
			 fc1[i][j]=feedOblivInt(io->fc1[i][j],1);
			 //printf("%d\t",fc1[i][j]);
		}
		//printf("\n");
	}
	//bc1
	for(i=0;i<fc1_col;i++){
		 bc1[i]=feedOblivInt(io->bc1[i],1);
		 //printf("%d\t",bc1[i]);
	}
	//fc2
	for(i=0;i<fc2_row;i++){
		for(j=0;j<fc2_col;j++){
			 fc2[i][j]=feedOblivInt(io->fc2[i][j],1);
			 //printf("%d\t",fc2[i][j]);
		}
	//printf("\n");
	}
	//bc2
	for(i=0;i<fc2_col;i++){
		bc2[i]=feedOblivInt(io->bc2[i],1);
		//printf("%d\t",bc2[i]);
	}

	//face
	for(i=0;i<x_row;i++){
		for(j=0;j<x_col;j++){
			 face[i][j]=feedOblivInt(io->face[i][j],2);
			 //printf("%d\t",face[i][j]);
		}
		//printf("\n");
	}


//-----------------------------------------------------------
//-----------------------------------------------------------

	int W1[x_row+4][x_col+4]={0};


	//obliv int OW1[x_row+4][x_col+4];
	//obliv int **OW1 = malloc(sizeof(obliv int) * (x_row+4));
	//for(i=0;i<x_row+4;i++){
		//face[i]=malloc(sizeof(obliv int) * (x_col+4));	
	//}




	for(i=0;i<x_row+4;i++){
		for(j=0;j<x_col+4;j++){
			 OW1[i][j]=zero;
			 //printf("%d\t",OW1[i][j]);
		}
		//printf("\n");
	}


//printf("zero:%d\n",zero);


	for(i=0;i<x_row+4;i++){
		for(j=0;j<x_col+4;j++){
			 OW1[i][j]=feedOblivInt(W1[i][j],1);
			 //printf("%d\t",OW1[i+2][j+2]);
		}
		//printf("\n");
	}



	//obliv int h_conv1[x_row][x_col];
	//obliv int **h_conv1 = malloc(sizeof(obliv int) * x_row);
	//for(i=0;i<x_row;i++){
		//h_conv1[i]=malloc(sizeof(obliv int) * x_col+4);	
	//}

	//填充

	for(i=0;i<x_row;i++){
		for(j=0;j<x_col;j++){
			 OW1[i+2][j+2]=face[i][j];
			 //printf("%d\t",OW1[i+2][j+2]);
		}
		//printf("\n");
	}

	//conv2d_1
	for(i=2;i<x_row+2;i++){
		for(j=2;j<x_col+2;j++){
			k=0;
			//obliv int s=0;
			for(m=0;m<5;m++){
				for(n=0;n<5;n++){
			 		//k+=w1[m][n]*OW1[i-2+m][j-2+n]; //x*w
					k+=w1[m][n]*w2[m][n];
				}
			}
			//h_conv1[i-2][j-2]=k/t+b1;                 //x*w+b
			//obliv if(h_conv1[i-2][j-2]<0) h_conv1[i-2][j-2]=0;  //relu
			//printf("%d\t",h_conv1[i][j]);
		}
		//printf("\n");
	}



	//maxpool_1
	obliv int h_pool1[x_row_pool1][x_col_pool1];
	for(i=0;i<x_row-1;i+=2){
		for(j=0;j<x_col-1;j+=2){
			k=h_conv1[i][j];
			//printf("%d\n",k);
			for(m=0;m<2;m++){
				for(n=0;n<2;n++){
					obliv if(h_conv1[i+m][j+n]>k){
						k=h_conv1[i+m][j+n];}				
				}			
			}
			h_pool1[i/2][j/2]=k;	
			//printf("%d\t",h_pool1[i/2][j/2]);	
		}
		//printf("\n");
	}

//---------------------------------------------------------
//---------------------------------------------------------
	
	int W2[x_row_pool1+4][x_col_pool1+4]={0};
	obliv int OW2[x_row_pool1+4][x_col_pool1+4];

	for(i=0;i<x_row_pool1+4;i++){
		for(j=0;j<x_row_pool1+4;j++){
			 OW2[i][j]=feedOblivInt(W2[i][j],1);
			 //printf("%d\t",OW2[i+2][j+2]);
		}
		//printf("\n");
	}

	obliv int h_conv2[x_row_pool1][x_col_pool1];
	//填充
	for(i=0;i<x_row_pool1;i++){
		for(j=0;j<x_col_pool1;j++){
			 OW2[i+2][j+2]=h_pool1[i][j];
			 //printf("%d\t",OW2[i+2][j+2]);
		}
		//printf("\n");
	}

	//conv2d_2
	for(i=2;i<x_row_pool1+2;i++){
		for(j=2;j<x_col_pool1+2;j++){
			k=0;
			for(m=0;m<5;m++){
				for(n=0;n<5;n++){
			 		k+=w2[m][n]*OW2[i-2+m][j-2+n]; //x*w
				}
			}
			h_conv2[i-2][j-2]=k/t+b2;                 //x*w+b
			obliv if(h_conv2[i-2][j-2]<0) h_conv2[i-2][j-2]=0;  //relu
			//printf("%d\t",h_conv2[i-2][j-2]);
		}
		//printf("\n");
	}

	//maxpool_2
	obliv int h_pool2[x_row_pool2][x_col_pool2];
	for(i=0;i<x_row_pool1-1;i+=2){
		for(j=0;j<x_col_pool1-1;j+=2){
			k=h_conv2[i][j];
			//printf("%d\n",k);
			for(m=0;m<2;m++){
				for(n=0;n<2;n++){
					obliv if(h_conv2[i+m][j+n]>k){
						k=h_conv2[i+m][j+n];}				
				}			
			}
			h_pool2[i/2][j/2]=k;	
			//printf("%d\t",h_pool2[i/2][j/2]);	
		}
		//printf("\n");
	}
//------------------------------------------------------------------
//------------------------------------------------------------------

	obliv int h_pool2_flat[fc1_row];
	for(i=0;i<x_row_pool2;i++){
		for(j=0;j<x_col_pool2;j++){
			h_pool2_flat[i*x_col_pool2+j]=h_pool2[i][j];
			//printf("%d\t",h_pool2_flat[i*x_row_pool2+j]);
		}
		//printf("\n");
	}

	obliv int h_fc1[fc1_col];
	
	for(i=0;i<fc1_col;i++){
		for(j=0;j<fc1_row;j++){
			h_fc1[i]+=h_pool2_flat[j]*fc1[j][i];
		}
		h_fc1[i]=h_fc1[i]/t+bc1[i];
		obliv if(h_fc1[i]<0) h_fc1[i]=0;               //relu
		//printf("%d\t",h_fc1[i]);
	}

	obliv int y_conv[fc2_col];
	for(i=0;i<fc2_col;i++){
		for(j=0;j<fc2_row;j++){
			y_conv[i]+=h_fc1[j]*fc2[j][i];
		}
		y_conv[i]=y_conv[i]/t+bc2[i];
		//printf("%d\t",y_conv[i]);
	}
	//printf("\n");

	revealOblivInt(&io->res,max(y_conv,fc2_col),0);

	free(face);
	free(fc1);
	free(fc2);
	//free(OW1);
	//free(h_conv1);
*/
}
